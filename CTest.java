/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package calculator;

import java.awt.Button;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;

/**
 *
 * @author jett helfrich
 */
public class CTest extends javax.swing.JFrame {

    /**
     * Creates new form CTest
     */
    public CTest() {
        initComponents();
        theArrayThing();
        buttons.addAll(Arrays.asList(zero,one,two,three,four,five,six,seven,eight,nine));
        operators.addAll(Arrays.asList(equals,plus,minus,modulo,mult,div,clr,decimal));
        KeyListener listener = listen;
        addKeyListener(listener);
        setFocusable(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
//    private int type; //holds which jRadioButton is selected
    private String argLine = "";//the display child thing
    private String prevResult = "";//the display adult line thing that's above argLine
    private List<Button> buttons = new ArrayList();//List of buttons. duh.
    private List<Button> operators = new ArrayList();//same^^but for the operator buttons
    
//    private Button label;//not used currently i guess
    private String bpress;//the thing that holds literally everything before its vomited into the display
    
    private void getInputConvertOperators(java.awt.Button in)//yes important
    {
        bpress = null;
        bpress = in.getLabel();
        switch(bpress)
        {
            case "=":
                bpress = "";
                try
                {
                    evaluate(argLine);
                }
                catch(Exception f)
                {
                    argLine = "Syntax Error";
                }
                break;
            case "+":
                bpress = "+";
                break;
            case "-":
                bpress = "-";
                break;
            case "*":
                bpress = "*";
                break;
            case "/":
                bpress = "/";
                break;
            case "%":
                bpress = "%";
                break;
            case ".":
                bpress = ".";
                break;
            case "CE":
                bpress = "";
                argLine = "";
                break;
        }
    }

    private boolean percent;
    private void setbtyped(String in)//Analyzes the button that was pressed and turns it into smth recognizable
    {
        if(in.length()>1)
            if(in.substring(0,in.length()-2).equals("NumPad"))
                in = in.substring(in.length()-1);
        
        if(in.equals("5"))
            if(percent)
            {
                bpress = "%";
                percent = false;
                doTheThing();
                return;
            }
        if(in.equals("Shift"))
        {
            percent = true;
            return;
        }
        
        try
        {
            int yes = Integer.parseInt(in);
            bpress = in;
        }
        catch(Exception e)
        {
            Button hold;
            switch(in)
            {
                case "+":
                    hold = plus;
                    break;
                case "-":
                    hold = minus;
                    break;
                case "*":
                    hold = mult;
                    break;
                case "modulo":
                    hold = modulo;
                    break;
                case "/":
                    hold = div;
                    break;
                case "Delete":
                    hold = clr;
                    break;
                case ".":
                    hold = decimal;
                    break;
                case "Enter":
                    bpress = "";
                    try
                    {
                        evaluate(argLine);
                    }
                    catch(Exception f)
                    {
                        argLine = "Syntax Error";
                    }
                    doTheThing(true);
                    return;
                default:
                    pM.puts("ERROR: Invalid button pressed");
                    hold = null;
            }
            getInputConvertOperators(hold);
        }
        doTheThing();
    }
    
    private void doTheThing()//THIS DOES THE THING DO NOT TOUCH EVER!!11!!1
    {
        argLine+=bpress;
        resConvTArea.setText(prevResult+"\n"+argLine);
    }
    
    private void doTheThing(boolean check)//does the thing when ENTER is pressed
    {
        argLine+=bpress;
//        pM.puts("bpress = "+bpress+"\nargLine = "+argLine);
        argLine = format(Double.parseDouble(argLine));
        prevResult = argLine;
        resConvTArea.setText(prevResult+"\n");
    }
    
    private static String format(Number n)//bless stackoverflow for this
    {
        NumberFormat format = DecimalFormat.getInstance();
        format.setRoundingMode(RoundingMode.FLOOR);
        format.setMinimumFractionDigits(0);
        format.setMaximumFractionDigits(3);
        return format.format(n);
    }
    
    private int findOperators(String todo, int startIndex, int endindex)//decidedly less useless than above
    {
        String[] opserators = new String[]{"/","*","-","+","%"};
        for(int i = startIndex; i < endindex; i++)
            for (String op : opserators) 
                if (todo.substring(i,i+1).equals(op)) 
                    return i;
        return -1;
    }
    
    private List<String> ffff(List<String> sections, int operator, int index)//does the math somehow
    {
        double vone;
        double vtwo;
        int dof;
        try
        {
            vone = Double.parseDouble(sections.get(index));
            vtwo = Double.parseDouble(sections.get(index+1));
            dof = 1;
        }
        catch(Exception e)
        {
            vone = Double.parseDouble(sections.get(index-1));
            vtwo = Double.parseDouble(sections.get(index));
            dof = 2;
        }
//        pM.puts(vone+" "+vtwo);
        double nu;
        switch(operator)
        {
            case 0://multiply
                nu = vone*vtwo;
                break;
            case 1://divide
                nu = vone/vtwo;
                break;
            case 2://add
                nu = vone+vtwo;
                break;
            case 3://subtract
                nu = vone-vtwo;
                break;
            case 4://modulo
                nu = vone%vtwo;
                break;
            default:
                nu = 0;
                break;
        }
        switch (dof) 
        {
            case 1:
                sections.remove(index);
                sections.remove(index);
                sections.add(index, Double.toString(nu));
                break;
            case 2:
                sections.remove(index-1);
                sections.remove(index-1);
                sections.add(index-1, Double.toString(nu));
                break;
            default:
                pM.puts("AAAAAGH");
                break;
        }
        return sections;
    }
    
    private List<Integer> lindexes = new ArrayList();//int index of where operators are
    private List<String> slindexes = new ArrayList();//string list of the operators in work
    private List<String> sections = new ArrayList();//takes the values between operators to work with later
    private void evaluate(String work)//change out slindexes with actual list of number values
    {
        argLine = "";
        lindexes = new ArrayList();
        slindexes = new ArrayList();
        sections = new ArrayList();
        
        if(findOperators(work,0,work.length())==-1)
            return;
        
        int buffer;
        for(Integer index = 0; index < work.length(); index++)
        {
            buffer = findOperators(work, (int)index, (int)index+1);
            if(buffer!=-1)
                lindexes.add(index);
        }
        
        if(work.charAt(0)=='-')
        {
            sections.add(work.substring(0,lindexes.get(1)));
            lindexes.remove(0);
        }
        else
            sections.add(work.substring(0,lindexes.get(0)));
            
        for(Integer hold : lindexes)
            slindexes.add(work.substring(hold,hold+1));
        
        boolean skip = false;
        int lint = 0;
        if(!(lindexes.size()<1))
            for(int i = 0; i < lindexes.size()-1; i++)
            {
                if(lindexes.get(i)+1==lindexes.get(i+1))
                {
                    sections.add(work.substring(lindexes.get(i)+1,lindexes.get(i+1)+2));
                    lint = i+1;
                    skip = true;
                }
                else
                    sections.add(work.substring(lindexes.get(i)+1,lindexes.get(i+1)));
            }
        sections.add(work.substring(lindexes.get(lindexes.size()-1)+1));//gets the last chunk of stuff to work with
        if(skip)
        {
            sections.remove(lint+1);
            lindexes.remove(lint);
            slindexes.remove(lint);
        }
        if(sections.size()==1)
        {
            bpress = sections.get(0);
            return;
        }
        loopstationv1_0();
        String anobuffer = sections.get(0);
        bpress = anobuffer;
    }
    
    private void loopstationv1_0()//Evaluate Part 2: Attack of the Code
    {
        String op;
        for(int i = 0; i < 5; i++)
        {
            switch(i)
            {
                case 0:
                    op = "*";
                    break;
                case 1:
                    op = "/";
                    break;
                case 2:
                    op = "+";
                    break;
                case 3:
                    op = "-";
                    break;
                case 4:
                    op = "%";
                    break;
                default:
                    op = "";
            }
            
            boolean step = false;
            while(!step)
            {
                if(!slindexes.isEmpty())
                {
                    for(String currop : slindexes)
                        step = !(currop.equals(op));
                    if(step)
                        break;
                }
                else
                    break;
                for(int j = 0; j < slindexes.size(); j++)
                {
                    String currop = slindexes.get(j);
                    if(currop.equals(op))
                        if((currop.equals(op)))
                        {
                            sections = ffff(sections, i, j);
                            slindexes.remove(j);
                        }
                }
            }
        }
    }
    
    KeyListener listen = new KeyListener()//The communist method
    {
        public void keyPressed(KeyEvent e)
        {
            int key = e.getKeyCode();
            try
            {
                String keyString = KeyEvent.getKeyText(key);
                bpress = keyString;
                setbtyped(bpress);
            }catch(Exception s)
            {
                //do Nothung
            }
        }
        public void keyTyped(KeyEvent e){}
        public void keyReleased(KeyEvent e){}
    };
    
    private void theArrayThing()//used in init
    {
        for(Button hold : buttons)
            hold.addKeyListener(listen);
        for(Button holdmore : operators)
            holdmore.addKeyListener(listen);
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        resultConversion = new javax.swing.JScrollPane();
        resConvTArea = new javax.swing.JTextArea();
        numbers = new javax.swing.JPanel();
        zero = new java.awt.Button();
        one = new java.awt.Button();
        two = new java.awt.Button();
        three = new java.awt.Button();
        four = new java.awt.Button();
        five = new java.awt.Button();
        six = new java.awt.Button();
        seven = new java.awt.Button();
        eight = new java.awt.Button();
        nine = new java.awt.Button();
        decimal = new java.awt.Button();
        ops = new javax.swing.JPanel();
        equals = new java.awt.Button();
        plus = new java.awt.Button();
        minus = new java.awt.Button();
        mult = new java.awt.Button();
        modulo = new java.awt.Button();
        clr = new java.awt.Button();
        div = new java.awt.Button();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        resultConversion1 = new javax.swing.JScrollPane();
        resConvTArea1 = new javax.swing.JTextArea();
        numbers1 = new javax.swing.JPanel();
        zero1 = new java.awt.Button();
        one1 = new java.awt.Button();
        two1 = new java.awt.Button();
        three1 = new java.awt.Button();
        four1 = new java.awt.Button();
        five1 = new java.awt.Button();
        six1 = new java.awt.Button();
        seven1 = new java.awt.Button();
        eight1 = new java.awt.Button();
        nine1 = new java.awt.Button();
        A1 = new java.awt.Button();
        B1 = new java.awt.Button();
        C1 = new java.awt.Button();
        D1 = new java.awt.Button();
        E1 = new java.awt.Button();
        F1 = new java.awt.Button();
        ops1 = new javax.swing.JPanel();
        equals1 = new java.awt.Button();
        plus1 = new java.awt.Button();
        minus1 = new java.awt.Button();
        mult1 = new java.awt.Button();
        modulo1 = new java.awt.Button();
        clr1 = new java.awt.Button();
        div1 = new java.awt.Button();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        resConvTArea.setEditable(false);
        resConvTArea.setColumns(20);
        resConvTArea.setRows(5);
        resultConversion.setViewportView(resConvTArea);

        numbers.setPreferredSize(new java.awt.Dimension(115, 115));

        zero.setLabel("0");

        one.setLabel("1");

        two.setLabel("2");

        three.setLabel("3");

        four.setLabel("4");

        five.setLabel("5");

        six.setLabel("6");

        seven.setLabel("7");

        eight.setLabel("8");

        nine.setLabel("9");

        decimal.setLabel(".");
        decimal.setMinimumSize(new java.awt.Dimension(23, 24));

        javax.swing.GroupLayout numbersLayout = new javax.swing.GroupLayout(numbers);
        numbers.setLayout(numbersLayout);
        numbersLayout.setHorizontalGroup(
            numbersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(numbersLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(numbersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(numbersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(seven, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(numbersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(numbersLayout.createSequentialGroup()
                            .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(5, 5, 5)
                            .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(zero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(5, 5, 5)
                .addGroup(numbersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(six, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(three, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(decimal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        numbersLayout.setVerticalGroup(
            numbersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, numbersLayout.createSequentialGroup()
                .addGroup(numbersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(numbersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(numbersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(numbersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(zero, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(decimal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        equals.setLabel("=");

        plus.setLabel("+");
        plus.setMinimumSize(new java.awt.Dimension(23, 25));

        minus.setLabel("-");
        minus.setMinimumSize(new java.awt.Dimension(23, 25));

        mult.setLabel("*");
        mult.setMinimumSize(new java.awt.Dimension(23, 25));

        modulo.setLabel("%");
        modulo.setMinimumSize(new java.awt.Dimension(23, 25));

        clr.setLabel("CE");
        clr.setMinimumSize(new java.awt.Dimension(23, 25));

        div.setLabel("/");
        div.setMinimumSize(new java.awt.Dimension(23, 25));

        javax.swing.GroupLayout opsLayout = new javax.swing.GroupLayout(ops);
        ops.setLayout(opsLayout);
        opsLayout.setHorizontalGroup(
            opsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, opsLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(opsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(plus, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minus, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mult, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(div, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(opsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(clr, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modulo, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(equals, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        opsLayout.setVerticalGroup(
            opsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, opsLayout.createSequentialGroup()
                .addGroup(opsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(div, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clr, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(opsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(opsLayout.createSequentialGroup()
                        .addComponent(mult, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addGroup(opsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(minus, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(opsLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(plus, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(opsLayout.createSequentialGroup()
                        .addComponent(modulo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(equals, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(numbers, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ops, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(resultConversion, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resultConversion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ops, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(numbers, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Basic", jPanel2);
        jTabbedPane2.addTab("Scientific", jTabbedPane3);

        resConvTArea1.setEditable(false);
        resConvTArea1.setColumns(20);
        resConvTArea1.setRows(5);
        resultConversion1.setViewportView(resConvTArea1);

        numbers1.setPreferredSize(new java.awt.Dimension(115, 115));

        zero1.setLabel("0");

        one1.setLabel("1");

        two1.setLabel("2");

        three1.setLabel("3");

        four1.setLabel("4");

        five1.setLabel("5");

        six1.setLabel("6");

        seven1.setLabel("7");

        eight1.setLabel("8");

        nine1.setLabel("9");

        A1.setLabel("A");

        B1.setLabel("B");

        C1.setLabel("C");

        D1.setLabel("D");

        E1.setLabel("E");

        F1.setLabel("F");

        javax.swing.GroupLayout numbers1Layout = new javax.swing.GroupLayout(numbers1);
        numbers1.setLayout(numbers1Layout);
        numbers1Layout.setHorizontalGroup(
            numbers1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(numbers1Layout.createSequentialGroup()
                .addComponent(zero1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(one1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(two1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(three1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(numbers1Layout.createSequentialGroup()
                .addComponent(four1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(five1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(six1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(seven1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(numbers1Layout.createSequentialGroup()
                .addComponent(eight1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(nine1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(A1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(B1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(numbers1Layout.createSequentialGroup()
                .addComponent(C1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(D1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(E1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(F1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        numbers1Layout.setVerticalGroup(
            numbers1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, numbers1Layout.createSequentialGroup()
                .addGroup(numbers1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(zero1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(one1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(two1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(three1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(numbers1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(four1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(five1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(six1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seven1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(numbers1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(B1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(A1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nine1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eight1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(numbers1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(E1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(F1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(C1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(D1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        equals1.setLabel("=");

        plus1.setLabel("+");
        plus1.setMinimumSize(new java.awt.Dimension(23, 25));

        minus1.setLabel("-");
        minus1.setMinimumSize(new java.awt.Dimension(23, 25));

        mult1.setLabel("*");
        mult1.setMinimumSize(new java.awt.Dimension(23, 25));

        modulo1.setLabel("%");
        modulo1.setMinimumSize(new java.awt.Dimension(23, 25));

        clr1.setLabel("CE");
        clr1.setMinimumSize(new java.awt.Dimension(23, 25));

        div1.setLabel("/");
        div1.setMinimumSize(new java.awt.Dimension(23, 25));

        javax.swing.GroupLayout ops1Layout = new javax.swing.GroupLayout(ops1);
        ops1.setLayout(ops1Layout);
        ops1Layout.setHorizontalGroup(
            ops1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ops1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(ops1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(plus1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minus1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mult1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(div1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(ops1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(clr1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modulo1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(equals1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        ops1Layout.setVerticalGroup(
            ops1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ops1Layout.createSequentialGroup()
                .addGroup(ops1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(div1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clr1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(ops1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ops1Layout.createSequentialGroup()
                        .addComponent(mult1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addGroup(ops1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(minus1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(ops1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(plus1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(ops1Layout.createSequentialGroup()
                        .addComponent(modulo1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(equals1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultConversion1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(numbers1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ops1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resultConversion1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numbers1, 121, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ops1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Convert", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CTest().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button A1;
    private java.awt.Button B1;
    private java.awt.Button C1;
    private java.awt.Button D1;
    private java.awt.Button E1;
    private java.awt.Button F1;
    private java.awt.Button clr;
    private java.awt.Button clr1;
    private java.awt.Button decimal;
    private java.awt.Button div;
    private java.awt.Button div1;
    private java.awt.Button eight;
    private java.awt.Button eight1;
    private java.awt.Button equals;
    private java.awt.Button equals1;
    private java.awt.Button five;
    private java.awt.Button five1;
    private java.awt.Button four;
    private java.awt.Button four1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private java.awt.Button minus;
    private java.awt.Button minus1;
    private java.awt.Button modulo;
    private java.awt.Button modulo1;
    private java.awt.Button mult;
    private java.awt.Button mult1;
    private java.awt.Button nine;
    private java.awt.Button nine1;
    private javax.swing.JPanel numbers;
    private javax.swing.JPanel numbers1;
    private java.awt.Button one;
    private java.awt.Button one1;
    private javax.swing.JPanel ops;
    private javax.swing.JPanel ops1;
    private java.awt.Button plus;
    private java.awt.Button plus1;
    private javax.swing.JTextArea resConvTArea;
    private javax.swing.JTextArea resConvTArea1;
    private javax.swing.JScrollPane resultConversion;
    private javax.swing.JScrollPane resultConversion1;
    private java.awt.Button seven;
    private java.awt.Button seven1;
    private java.awt.Button six;
    private java.awt.Button six1;
    private java.awt.Button three;
    private java.awt.Button three1;
    private java.awt.Button two;
    private java.awt.Button two1;
    private java.awt.Button zero;
    private java.awt.Button zero1;
    // End of variables declaration//GEN-END:variables
}